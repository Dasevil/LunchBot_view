from telegram import ReplyKeyboardRemove, Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, ConversationHandler, filters
from telegram import ReplyKeyboardMarkup
from user import UserSex, User
import logging
from uuid import uuid4

# –õ–æ–≥–≥–∏–Ω–≥
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–•
REGISTER, GET_NAME, GET_SEX, GET_PARTNER_PREFERENCE, GET_LUNCH_TIME, PREFERENCES, FEEDBACK = range(7)

# –ü–∞—Ä–æ–¥–∏—è –Ω–∞ –ë–î
users = {}
lunch_matches = {}
feedbacks = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
async def show_navigation_menu(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫."""
    navigation_buttons = ReplyKeyboardMarkup(
        [
            ["/start", "/find_buddy"],
            ["/feedback"],
        ],
        resize_keyboard = True,  # –ß—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–ª–∏—Å—å –ø–æ–¥ —ç–∫—Ä–∞–Ω
        one_time_keyboard = False,  # –ß—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
    )
    await update.message.reply_text( "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup = navigation_buttons
    )


# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
async def start(update: Update, context: CallbackContext) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã \n"
        "–¢—ã –ø–æ–ø–∞–ª –≤ LunchBuddy ‚Äì –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞!\n"
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä–∞–ø–µ–∑–Ω–∏–∫–æ–≤, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ –∏ –∑–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É.\n"
        "–ü–æ–µ—Ö–∞–ª–∏! üöÄ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º):"
    )
    return GET_NAME 

# –ò–º—è
async def get_name(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    name = update.message.text
    if name.startswith('/'):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–∞—á–µ."
        )
        return GET_NAME
    users[user_id] = {"username": update.message.from_user.username, "name": name}

    await update.message.reply_text("–ü–æ–ª:", reply_markup=ReplyKeyboardMarkup([["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]], one_time_keyboard=True))
    return GET_SEX

# –ü–æ–ª
async def get_sex(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    sex = UserSex.MALE if update.message.text == "–ú—É–∂—Å–∫–æ–π" else UserSex.FEMALE
    users[user_id]["sex"] = sex
    # await update.message.reply_text(
    #     "–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º –í–∞–º –±—ã–ª–æ –±—ã –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ–±–µ–¥–∞—Ç—å?", 
    #     reply_markup=ReplyKeyboardMarkup([["–î–µ–≤—É—à–∫–∞", "–ü–∞—Ä–µ–Ω—å", "–ö–æ–º–ø–∞–Ω–∏—è", "–ù–µ–≤–∞–∂–Ω–æ"]], one_time_keyboard=True)
    # )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º –í–∞–º –±—ã–ª–æ –±—ã –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ–±–µ–¥–∞—Ç—å?", 
        reply_markup=ReplyKeyboardMarkup([["–î–µ–≤—É—à–∫–∞", "–ü–∞—Ä–µ–Ω—å", "–ù–µ–≤–∞–∂–Ω–æ"]], one_time_keyboard=True)
    )
    return GET_PARTNER_PREFERENCE

# async def find_buddies(update: Update, context: CallbackContext) -> None:
#     user_id = update.message.from_user.id
#     user_pref = users.get(user_id, {}).get("partner_preference")
#     user_lunch_time = users.get(user_id, {}).get("lunch_time")

#     if user_pref is None or user_lunch_time is None:
#         await context.bot.send_message(chat_id=user_id, text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –æ–±–µ–¥–∞!")
#         return

#     matching_groups = []
#     for uid, data in users.items():
#         if uid != user_id:
#             pref = data.get("partner_preference")
#             lunch_time = data.get("lunch_time")
#             username = data.get("username") # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ username

#             #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#             if pref is not None and lunch_time is not None and username is not None:
#                 if (user_pref, user_lunch_time) == (pref, lunch_time):
#                     matching_groups.append(uid)


#     if len(matching_groups) == 4: #–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —á–µ–ª–æ–≤–µ–∫–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
#         suitable_buddies = matching_groups + [user_id]
#         usernames = [f"@{users[uid]['username']}" for uid in suitable_buddies]
#         message = f"–î–ª—è –æ–±–µ–¥–∞ –ø–æ–¥—Ö–æ–¥—è—Ç: {', '.join(usernames)}"
#         await context.bot.send_message(chat_id=user_id, text=message)
#     else:
#         await context.bot.send_message(chat_id=user_id, text="–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π –¥–ª—è –æ–±–µ–¥–∞.")


# –ü—Ä–µ—Ñ—ã
async def get_partner_preference(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]["partner_preference"] = update.message.text
    await update.message.reply_text(
        "–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–±–µ–¥–∞:", 
        reply_markup=ReplyKeyboardMarkup(
            [["12:00-13:00", "13:00-14:00", "14:00-15:00"], ["15:00-16:00", "16:00-17:00"]],
            one_time_keyboard=True
        )
    )
    return GET_LUNCH_TIME

# –í—Ä–µ–º—è
async def get_lunch_time(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]["lunch_time"] = update.message.text
    
    await update.message.reply_text(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! ", reply_markup = ReplyKeyboardRemove()
    )
    
    await update.message.reply_text(
        "üçï –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –Ω–∞ –æ–±–µ–¥! üçï", reply_markup = ReplyKeyboardMarkup(
            [["/find_buddy"]], 
            one_time_keyboard = True, 
            resize_keyboard = True
        )
    )

    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ–∫–∞ –ø–æ—Ö —è –¥—É–º–∞—é)
async def save_preferences(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]["preferences"] = update.message.text
    await update.message.reply_text("–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return ConversationHandler.END

# –ú—ç—Ç—á–∏–Ω–≥
async def find_buddy(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_pref = users[user_id].get("partner_preference")
    user_lunch_time = users[user_id].get("lunch_time")
    
    for uid, data in users.items():
        # –ú—ç—Ç—á
        if uid != user_id and data.get("partner_preference") == user_pref and data.get("lunch_time") == user_lunch_time:
            lunch_matches[user_id] = uid
            lunch_matches[uid] = user_id
            await context.bot.send_message(chat_id=user_id, text=f"–î–ª—è –æ–±–µ–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç: @{users[uid]['username']}")
            await context.bot.send_message(chat_id=uid, text=f"–î–ª—è –æ–±–µ–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç: @{users[user_id]['username']}")
            return
    
    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –æ–±–µ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.")

# –†–µ–º–∞–π–Ω–¥–µ—Ä
async def remind(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    match_id = lunch_matches.get(user_id)
    
    if match_id:
        await context.bot.send_message(
            chat_id=user_id, 
            text=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —É –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ–±–µ–¥ —Å @{users[match_id]['username']}!"
        )
    else:
        await update.message.reply_text("–£ –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–∞ –æ–±–µ–¥.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–¥–±–µ–∫–∞
async def save_feedback(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    score, *review = update.message.text.split(maxsplit=1)
    score = float(score)
    review = review[0] if review else ""
    
    if user_id in lunch_matches:
        partner_id = lunch_matches[user_id]
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–∞—Ö—Ä–µ–Ω –Ω–µ –Ω–∞–¥–æ, –æ–±—Å—É–¥–∏—Ç–µ –∏ —É–¥–∞–ª–∏—Ç–µ –µ—Å–ª–∏ —á—Ç–æ)
        if "rating" in users[partner_id]:
            users[partner_id]["rating"] = (users[partner_id]["rating"] + score) / 2
        else:
            users[partner_id]["rating"] = score
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        feedbacks[user_id] = {"partner_id": partner_id, "score": score, "review": review}
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    else:
        await update.message.reply_text("–û–±–µ–¥ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è, –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–µ–ª—å–∑—è.")
    
    return ConversationHandler.END

async def feedback(update: Update, context: CallbackContext) -> int:
    await show_navigation_menu(update, context)
    await update.message.reply_text(
        "–û—Ü–µ–Ω–∏—Ç–µ –í–∞—à –æ–±–µ–¥:", 
        reply_markup=ReplyKeyboardMarkup(
            [["1", "2", "3"], ["4", "5"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return FEEDBACK

async def feedback_received(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤! \n"
        "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –í–∞—à—É –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ!",
        reply_markup=ReplyKeyboardMarkup(
            [["/start", "/find_buddy"]], 
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return ConversationHandler.END

# async def edit_profile(update: Update, context: CallbackContext) -> int:
#     """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Å –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
#     user_id = update.message.from_user.id
#     if user_id in users:
#         del users[user_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

#     context.user_data.clear()

#     await show_navigation_menu(update, context)
#     await update.message.reply_text(
#         "–í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è. –ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup = ReplyKeyboardRemove()
#     )
#     return GET_NAME

async def help_command(update: Update, context: CallbackContext) -> None:

    await update.message.reply_text(
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n"
        "/find_buddy - –ù–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –æ–±–µ–¥–∞\n"
        "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–º –æ–±–µ–¥–µ\n"
        # "/edit_profile - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)\n\n"
    )
    await show_navigation_menu(update, context)

def main() -> None:
    application = Application.builder().token("7700731666:AAESsLAY8Bu_KNNYBm3KCAL4ugKZWGVzbGw").build()

    # —Ä–µ–≥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT, get_name)],
            GET_SEX: [MessageHandler(filters.TEXT, get_sex)],
            GET_PARTNER_PREFERENCE: [MessageHandler(filters.TEXT, get_partner_preference)],
            GET_LUNCH_TIME: [MessageHandler(filters.TEXT, get_lunch_time)],
            PREFERENCES: [MessageHandler(filters.TEXT, save_preferences)],
            FEEDBACK: [MessageHandler(filters.TEXT, save_feedback)],
        },
        fallbacks=[]
    )
    application.add_handler(conv_handler)

    # –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("find_buddy", find_buddy))
    application.add_handler(CommandHandler("remind", remind))
    application.add_handler(CommandHandler("feedback", feedback))
    application.add_handler(CommandHandler("help", help_command))
    # application.add_handler(CommandHandler("edit_profile", edit_profile))

    # –õ–∞–Ω—á
    application.run_polling()


if __name__ == "__main__":
    main()
